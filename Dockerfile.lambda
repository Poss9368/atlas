# for the latest Amazon Linux 2 & python 3.10 & aws lambda
# https://gallery.ecr.aws/lambda/python
FROM public.ecr.aws/lambda/python:3.10 as base

RUN yum update -y && \
    yum install -y gcc10 gcc10-c++ bzip2-devel libffi-devel wget tar gzip zlib zlib-devel make openssl-devel

ENV CC=/usr/bin/gcc10-cc
ENV CXX=/usr/bin/gcc10-g++

#################### Install Cmake
FROM base as buildcmake
RUN wget https://cmake.org/files/v3.21/cmake-3.21.3.tar.gz

RUN tar -xf cmake-3.21.3.tar.gz && \
    cd cmake-3.21.3 && \
    ./bootstrap && \
    make && \
    make install

RUN rm -rf cmake-3.21.3 cmake-3.21.3.tar.gz
####################

#################### Install boost 1.82
FROM buildcmake as buildboost
RUN wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz
RUN yum install -y which g++
RUN tar -xf boost_1_82_0.tar.gz && \
    cd boost_1_82_0 && \
    ./bootstrap.sh --cxx=CXX && \
    ./b2 install

RUN rm -rf boost_1_82_0.tar.gz boost_1_82_0
####################

#################### Install repos
FROM buildboost as buildrepos

ARG BUILD_TYPE=Release
ARG INSTALL_DIR='/builds'

# Copy the source code to the container
COPY . /app

# Add the install directory to the path
ENV LIBRARY_PATH=${INSTALL_DIR}/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH=${INSTALL_DIR}/lib:$LD_LIBRARY_PATH

# Set the working directory
WORKDIR /app

# Get repos
RUN pip install setuptools wheel pybind11
RUN yum install -y git
RUN git submodule update --init --recursive
ARG nproc=8

# Build and install pybind11
WORKDIR /app/repos/pybind11/build
RUN rm -rf * && cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
    -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
    -DCMAKE_PREFIX_PATH=${INSTALL_DIR} \
    -DBUILD_TESTING=OFF &&\
    cmake --build . --config ${BUILD_TYPE} --target install -j ${nproc}


# Build and install QuantLib
WORKDIR /app/repos/QuantLib/build
RUN rm -rf * && cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
    -DQL_BUILD_BENCHMARK=OFF \
    -DQL_BUILD_EXAMPLES=OFF \
    -DQL_BUILD_TEST_SUITE=OFF \
    -DQL_TAGGED_LAYOUT=OFF \
    -DBoost_INCLUDE_DIR='/usr/include/boost158' \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
    -DCMAKE_PREFIX_PATH=${INSTALL_DIR} && \
    cmake --build . --config ${BUILD_TYPE} --target install -j ${nproc}

# Build and install nanobench
WORKDIR /app/repos/nanobench/build
RUN rm -rf * && cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
    -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
    -DCMAKE_PREFIX_PATH=${INSTALL_DIR} && \
    cmake --build . --config ${BUILD_TYPE} --target install -j ${nproc}

##############

############## Build Atlas
FROM buildrepos as buildatlas

WORKDIR /app/build

RUN rm -rf * && cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
    -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
    -DCMAKE_PREFIX_PATH=${INSTALL_DIR} \
    -DBUILD_BENCHMARK=ON \              
    -DBUILD_EXAMPLES=OFF && \
    cmake --build . --config ${BUILD_TYPE} --target install -j ${nproc}

# # Set the working directory for testing
WORKDIR /app/build/test

# Run tests
RUN ctest -C ${BUILD_TYPE}

# Build and upload Python package
WORKDIR /app/python

RUN ldconfig && pip install . 

VOLUME [ "/pythonpackage" ]
CMD ["bash"]


